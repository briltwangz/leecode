//我的思路：遍历字符串的每个字符，判断第i个和倒数第i个字符（括号）是否相等，若相等返回ture，不相等返回false。
//遍历到中间，s.length()/2。
//我写的代码
class Solution {
    public boolean isValid(String s) {
            for(int i = 0; i < s.length()/2; i++){
                if(s.charAt(i) == s.charAt(s.length()-1-i)){
                    return true;
                }
            }
            return false;
        }
    }
	//结果错误
	
//正确答案的思路：辅助栈法
/*栈先入后出特点的应用，遇到左括号，入栈，遇到右括号时将对应栈顶的左括号出栈（这两个在此时
是挨着的）
一、遍历完所有括号后stack为空
采用集合哈希表的方式构建左右括号的对应关系。K：左括号 V：右括号
左括号c则入栈push，stack
若stack.pop()的出栈括号与c不匹配，则提前返回false

二、边界问题
1.栈为空。
赋值？
2.字符串以左括号结尾。在最后判断 len(stack) == 1 是否成立，若成立，则返回false。

*/
//示例代码Java
class Solution {
	
	private static final Map<Character,Character> map = new HashMap<Character,Character>(){{
	put('{','}');
	//put() 方法将指定的键/值对插入到 HashMap 中。如果插入的 key 对应的 value 已经存在，则执行 value 替换操作，返回旧的 value 值，
	//如果不存在则执行插入，返回 null。
	put('[',']');
	put('(',')}');
	put('?','?');
	}};
	
    public boolean isValid(String s) {
		if(s.length() > 0 && !map.containsKey(s.charAt(0)))return false;
		LinkedList<Character> stack = new LinkedList<Character>(){{add('?');}};
		for(Character c : s.toCharArray()){
			if(map.containsKey(c)) stack.addLast(c);
			else if (map.get(stack.removeLast()) != c) return false;
		}
		return stack.size() == 1;
	}
}

//示例代码Python
class Solution {
	def isvalid(self,s:str) -> bool:
	dic = {'{':'}', '[':']', '(':')', '?':'?'}
	stack = ['?']
	for c in s:
		if c in dic :stack.append(c)
		else if dic[stack.pop()] != c:return False
	return len(stack) == 1
}
	
